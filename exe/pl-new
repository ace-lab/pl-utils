#!/usr/bin/env ruby

require 'json'
require 'getoptlong'
require 'securerandom'
require 'fileutils'

def usage
  STDERR.puts <<eos1
Usage: #{File.basename $0} [--topic=topic] [--tags=tag1,tag2] [--title=title] [--force] questiondir
   or #{File.basename $0} [-T topic] [-t tag1,tag2] [-n title] [-f] questiondir

Create questiondir/info.json (--force means overwrite if exists) with a random uuid,
the given topic (default="none"), the given tags (default=no tags), and the given question
title (defaults to same as last pathname component of questiondir).
eos1
  exit false
end

class PlNew
  def initialize(argv)
    @force = false
    @dirname = argv.pop or usage
    @opts = {
      uuid: SecureRandom.uuid,
      title: File.basename(@dirname),
      tags: [],
      topic: 'none',
      type: 'v3',
      force: false
    }
  end
  
  def get_options
    GetoptLong.new(
      ['--force', '-f', GetoptLong::NO_ARGUMENT],
      ['--title', '-n', GetoptLong::REQUIRED_ARGUMENT],
      ['--tags', '-t',  GetoptLong::REQUIRED_ARGUMENT],
      ['--topic', '-T',  GetoptLong::REQUIRED_ARGUMENT]).
      each do |opt,arg|
      case opt
      when '--help' then usage
      when '--force' then @force = true
      when '--topic' then @opts[:topic] = arg
      when '--tags' then @opts[:tags] = arg.split(/\s*,\s*/)
      when '--title' then @opts[:title] = arg
      end
    end
  end

  def run
    get_options
    FileUtils.makedirs(@dirname) unless Dir.exist?(@dirname)
    infojson = File.join(@dirname, 'info.json')
    if File.exist?(infojson) && !@force
      STDERR.puts "#{@dirname}/info.json exists, use --force or -f to overwrite"
      exit false
    end
    File.open(infojson, 'w') do |f|
      f.puts JSON.pretty_generate(@opts)
    end
  end
end

PlNew.new(ARGV).run()
